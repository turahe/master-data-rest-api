name: Docker

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'Dockerfile'
      - 'docker compose.yml'
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'Dockerfile'
      - 'docker compose.yml'
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'

env:
  REGISTRY: docker.io
  IMAGE_NAME: turahe/master-data-rest-api

jobs:
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar

  docker-test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: docker-build
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: master_data_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      meilisearch:
        image: getmeili/meilisearch:v1.5
        env:
          MEILI_MASTER_KEY: testkey123
        options: >-
          --health-cmd "curl -f http://localhost:7700/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7700:7700

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp

    - name: Load Docker image
      run: docker load --input /tmp/image.tar

    - name: Test Docker image - Version
      run: |
        IMAGE_TAG=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep master-data-rest-api | head -1 | awk '{print $1}')
        docker run --rm $IMAGE_TAG version

    - name: Test Docker image - Health check
      run: |
        IMAGE_TAG=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep master-data-rest-api | head -1 | awk '{print $1}')
        
        # Create test environment file
        cat > .env.test << EOF
        DB_HOST=host.docker.internal
        DB_PORT=5432
        DB_USER=testuser
        DB_PASSWORD=testpass
        DB_NAME=master_data_test
        DB_SSL_MODE=disable
        MEILISEARCH_HOST=http://host.docker.internal:7700
        MEILISEARCH_API_KEY=testkey123
        APP_HOST=0.0.0.0
        APP_PORT=8080
        EOF
        
        # Start container in background
        docker run -d --name test-api \
          --add-host=host.docker.internal:host-gateway \
          -p 8080:8080 \
          --env-file .env.test \
          $IMAGE_TAG serve
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Cleanup
        docker stop test-api
        docker rm test-api

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp

    - name: Load Docker image
      run: docker load --input /tmp/image.tar

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        input: /tmp/image.tar
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-push-dev:
    name: Push Development Image
    runs-on: ubuntu-latest
    needs: [docker-build, docker-test, docker-security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=develop
          type=sha,prefix=develop-

    - name: Build and push development image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docker compose-test:
    name: Docker Compose Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test environment file
      run: |
        cp .env.example .env
        echo "DB_PASSWORD=postgres123" >> .env
        echo "MEILISEARCH_API_KEY=testkey123" >> .env

    - name: Start services with Docker Compose
      run: docker compose up -d

    - name: Wait for services to be ready
      run: |
        echo "Waiting for PostgreSQL..."
        timeout 30 bash -c 'until docker compose exec -T postgres pg_isready -U postgres; do sleep 1; done'
        
        echo "Waiting for Meilisearch..."
        timeout 30 bash -c 'until curl -f http://localhost:7700/health; do sleep 1; done'
        
        echo "Waiting for API..."
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

    - name: Run integration tests
      run: |
        # Test database connection
        docker compose exec -T master_data_api ./master-data-api migrate status
        
        # Test API endpoints
        curl -f http://localhost:8080/health
        
        # Test with API key (if migrations create one)
        docker compose exec -T master_data_api ./master-data-api create-api-key --name "test-key" > api_key.txt || true

    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== PostgreSQL logs ==="
        docker compose logs postgres
        echo "=== Meilisearch logs ==="
        docker compose logs meilisearch
        echo "=== API logs ==="
        docker compose logs master_data_api

    - name: Cleanup
      if: always()
      run: docker compose down -v
