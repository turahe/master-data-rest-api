name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: master_data_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      meilisearch:
        image: getmeili/meilisearch:v1.5
        env:
          MEILI_MASTER_KEY: testkey123
        options: >-
          --health-cmd "curl -f http://localhost:7700/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7700:7700

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Set up test environment
      run: |
        cat > .env.test << EOF
        # Test Environment Configuration
        APP_NAME=Master Data REST API Test
        APP_ENV=test
        APP_VERSION=1.0.0
        APP_PORT=8080
        APP_HOST=localhost
        
        # Test Database Configuration
        DB_DRIVER=postgres
        DB_HOST=localhost
        DB_PORT=5432
        DB_NAME=master_data_test
        DB_USER=testuser
        DB_PASSWORD=testpass
        DB_SSL_MODE=disable
        
        # Test Search Configuration
        MEILISEARCH_HOST=http://localhost:7700
        MEILISEARCH_API_KEY=testkey123
        
        # Test Logging Configuration
        LOG_LEVEL=debug
        LOG_FORMAT=text
        LOG_OUTPUT=stdout
        EOF

    - name: Run database migrations
      run: |
        go build -o bin/master-data-api main.go
        ./bin/master-data-api migrate up --config .env.test

    - name: Run unit tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Run integration tests
      run: go test -v -race -tags=integration ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Archive coverage results
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        if [ "$GOOS" = "windows" ]; then
          go build -ldflags="-s -w" -o dist/master-data-api-${{ matrix.goos }}-${{ matrix.goarch }}.exe main.go
        else
          go build -ldflags="-s -w" -o dist/master-data-api-${{ matrix.goos }}-${{ matrix.goarch }} main.go
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: master-data-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm master-data-api:test version
